SQL class3
### Basic Data Retrieval
1. **Retrieve All Employee Information**
   - Task: Please get all the employees’ information from the employees table.
   - Query: `SELECT * FROM employees;`
2. **Find Employees in Specific Departments**
   - Task: Retrieve employee IDs, first names, and last names for employees working in departments with IDs 100 and 140.
   - Query: `SELECT employee_id, first_name, last_name FROM employees WHERE department_id IN (100, 140);`
### Conditional Selection and Logical Operators
3. **Employees with High Salaries Excluding Certain Departments**
   - Task: Find first names, last names, salaries, and department IDs of employees who have salaries greater than $10,000 but do not work in department 50.
   - Query: `SELECT first_name, last_name, salary, department_id FROM employees WHERE salary > 10000 AND department_id <> 50;`
### Pattern Matching
4. **Employees Whose Names Start with ‘A’**
   - Task: Select all information for employees whose first names start with the letter ‘A’.
   - Query: `SELECT * FROM employees WHERE first_name LIKE ‘A%‘;`
5. **Employees Hired in June**
   - Task: Select all employees who started their job in June, regardless of the year.
   - Query: `SELECT * FROM employees WHERE hire_date LIKE ‘%-JUN-%‘;`
### Data Manipulation
6. **Concatenate First Name and Uppercase Last Name**
   - Task: Get the employees’ first names and concatenate them with their last names in uppercase, separated by a space.
   - Query: `SELECT first_name || ' ' || UPPER(last_name) AS full_name FROM employees;`
### Aggregation and Grouping
7. **Department-wise Employee Count**
   - Task: Count the number of employees in each department and display the department ID along with the count.
   - Query: `SELECT department_id, COUNT(*) AS num_employees FROM employees GROUP BY department_id;`
8. **Average Salary by Job ID**
   - Task: Calculate the average salary for each job ID.
   - Query: `SELECT job_id, AVG(salary) AS avg_salary FROM employees GROUP BY job_id;`
### Ordering and Distinct Selection
9. **Order Employees by Salary**
   - Task: Order employees by their salary in ascending order and display their first name, last name, and salary.
   - Query: `SELECT first_name, last_name, salary FROM employees ORDER BY salary ASC;`
10. **Distinct Job Titles**
    - Task: Retrieve all distinct job titles from the employees table.
    - Query: `SELECT DISTINCT job_id FROM employees;`
### Subqueries
11. **Find Employees with Minimum Salary**
    - Task: Select the first names of employees who earn the minimum salary in the company.
    - Query: `SELECT first_name FROM employees WHERE salary = (SELECT MIN(salary) FROM employees);`
12. **Employees Not in Specific Job Categories**
    - Task: Find employees who do not have the job IDs ‘IT_PROG’, ‘AD_VP’, or ‘AD_PRES’.
    - Query: `SELECT first_name, last_name FROM employees WHERE job_id NOT IN (‘IT_PROG’, ‘AD_VP’, ‘AD_PRES’);`
13. **Employees from the Sales Department**
    - Task: Get all employee information for those who work in the Sales department.
    - Query:
      ```sql
      SELECT * FROM employees WHERE department_id = (
          SELECT department_id FROM departments WHERE department_name = ‘Sales’
      );
      ```
      Sure, let’s dive into more examples involving aggregate functions, `GROUP BY`, `ORDER BY`, and `HAVING` clauses. These examples will help you practice and understand various SQL concepts better.
    ### Aggregate Functions
    Aggregate functions perform a calculation on a set of values and return a single value.
    #### Example 1: Calculate Total Number of Employees
    ```sql
    SELECT COUNT(*) AS total_employees FROM employees;
    ```
    #### Example 2: Find the Maximum and Minimum Salary
    ```sql
    SELECT MAX(salary) AS max_salary, MIN(salary) AS min_salary FROM employees;
    ```
    #### Example 3: Calculate the Average Salary
    ```sql
    SELECT AVG(salary) AS average_salary FROM employees;
    ```
    #### Example 4: Sum of Salaries in Each Department
    ```sql
    SELECT department_id, SUM(salary) AS total_salaries FROM employees GROUP BY department_id;
    ```
    ### GROUP BY
    `GROUP BY` clause groups rows that have the same values into summary rows.
    #### Example 5: Average Salary by Department
    ```sql
    SELECT department_id, AVG(salary) AS average_salary FROM employees GROUP BY department_id;
    ```
    #### Example 6: Count Employees in Each Job Category
    ```sql
    SELECT job_id, COUNT(*) AS number_of_employees FROM employees GROUP BY job_id;
    ```
    ### ORDER BY
    `ORDER BY` clause is used to sort the result set in ascending or descending order.
    #### Example 7: Order Departments by Average Salary Descending
    ```sql
    SELECT department_id, AVG(salary) AS average_salary FROM employees GROUP BY department_id ORDER BY average_salary DESC;
    ```
    #### Example 8: List Employees by Name in Ascending Order
    ```sql
    SELECT first_name, last_name FROM employees ORDER BY first_name ASC, last_name ASC;
    ```
    ### HAVING
    `HAVING` clause is used to filter groups based on a specified condition.
    #### Example 9: Departments with More than 10 Employees
    ```sql
    SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(*) > 10;
    ```
    #### Example 10: Departments with Average Salary Above Certain Threshold
    ```sql
    SELECT department_id, AVG(salary) AS average_salary FROM employees GROUP BY department_id HAVING AVG(salary) > 5000;
    ```
    ### Combined Use of GROUP BY, HAVING, and ORDER BY
    #### Example 11: Highest Average Salary Departments
    ```sql
    SELECT department_id, AVG(salary) AS average_salary FROM employees GROUP BY department_id HAVING AVG(salary) > 6000 ORDER BY average_salary DESC;
    ```
    This query selects departments with an average salary above 6000, orders them by the average salary in descending order.
    #### Example 12: Job Categories with Minimum Salary Above a Value
    ```sql
    SELECT job_id, MIN(salary) AS minimum_salary FROM employees GROUP BY job_id HAVING MIN(salary) > 4000 ORDER BY minimum_salary ASC;
    ```
    This lists job categories where the minimum salary is above 4000, sorted by the minimum salary in ascending order.
    ### Practice with Complex Conditions
    #### Example 13: Find Jobs with Highest Maximum Salary
    ```sql
    SELECT job_id FROM employees GROUP BY job_id HAVING MAX(salary) = (SELECT MAX(salary) FROM employees);
    ```
    This query identifies job IDs that have the highest maximum salary in the company.
count how many people has commission_pct
select count(first_name ) , commission_pct from employees group by commission_pct;
count how many people has commission_pct not null and sort asc
-----
select count(first_name ) as people , commission_pct
from employees
group by commission_pct
having commission_pct is not null
order by people;
-----------------------------------------------------------------
A JOIN clause is used to combine rows from two or more tables, based on a related column between them.
3 types of joins
    --inner join
    --outer join:
      -full join
      -left join
      - right join
  self join
NATURAL JOIN
THRE ARE CROSS JOIN - YOU DO NOT KNOW IT
NATURAL JOIN automatically joins tables based on columns with the same names and compatible data types in both tables. It eliminates the need to specify a joining condition explicitly.
  Understanding JOINs
  ON Clause: Specifies the condition for the join, typically by matching primary keys and foreign keys between tables.
  Aliases: Are often used in joins (e and d in the examples) to make queries easier to read and to resolve column name ambiguities.
INNER JOIN - we will have only matching data INNER JOIN
IN INTERVIEW PLEASE USE THIS WORDS MATCHING DATA
  departments table has more dep_id than empl table
  join will give us only matching data
FULL JOIN RETURNS ALL DATA FROM BOTH TABLES:
    For every non matching data records set to null;
LEFT OUTTER JOIN - IT WILL RETURN ALL DATA FROM LEFT and  ONLY MATCHING DATA FROM right TABLE.
Right  OUTTER JOIN - IT WILL RIGHT ALL DATA FROM LEFT and  ONLY MATCHING DATA FROM LEFT TABLE.
SELECT FIRST_NAME , LAST_NAME , department_name
FROM employees
inner join departments
on e.department_id = d.department_id;
explain syntax
I need to make alias for each Collumn
LEFT OUTTER JOIN - ALL FROM LEFT AND MATCHING FROM RIGHT;
SELECT e.first_name, e.last_name, d.department_name
FROM employees e
LEFT JOIN departments d ON e.department_id = d.department_id;
RIGHT OUTTER JOIN - ALL FROM RIGHT AND MATHCING FROM LEFT
SELECT e.first_name, e.last_name, d.department_name
FROM employees e
RIGHT JOIN departments d ON e.department_id = d.department_id;
FULL JOIN (or FULL OUTER JOIN)
SELECT e.first_name, e.last_name, d.department_name
FROM employees e
FULL OUTER JOIN departments d ON e.department_id = d.department_id;
SELF JOIN - A regular join, but the table is joined with itself.
SELECT e1.first_name AS Employee1, e2.first_name AS Employee2, e1.job_id
FROM employees e1
JOIN employees e2 ON e1.employee_id != e2.employee_id AND e1.job_id = e2.job_id;
NATURAL JOIN
SELECT e.first_name, d.department_name
FROM employees e
NATURAL JOIN departments d;
USING
SELECT e.first_name, d.department_name
FROM employees e
JOIN departments d USING(department_id);
-----------------------------------------------------------------
select * from job_history;
select * from jobs;
1 select * from jobs j
inner join job_history jh
on j.job_id = jh.job_id;
2 select * from jobs j
full join job_history jh
on j.job_id = jh.job_id;
3  select * from jobs j
LEFT join job_history jh
on j.job_id = jh.job_id;
4 select * from jobs j
LEFT join job_history jh
on j.job_id = jh.job_id;
FIND FIRST_NAME , LAST_NAME ,  JOB_ID , Department_ID , START_DATE, END_DATE
SELECT e.first_name ,  e.LAST_NAME ,  e.JOB_ID , e.Department_ID , jh.START_DATE, jh.END_DATE
from employees e
inner join job_history jh
on e.employee_id = jh.employee_id;
--fileter out only employees who worked starting JAN 1989 and ended DEC 1994
where , And , <>
SELECT e.first_name ,  e.LAST_NAME ,  e.JOB_ID , e.Department_ID , jh.START_DATE, jh.END_DATE
from employees e
inner join jh
on e.employee_id = jh.employee_id
where jh.start_date > ‘01-JAN-89’ AND jh.END_DATE < ‘31-DEC-94’;
can you make it with like please ?
--find country_name  AND REGION_ID that have region_id as 3
select * from countries where region_id = 3;
select count(*) from countries where region_id = 3;
select * from regions;
looks at the scheema and try to join it and find the names
SELECT country_name , REGION_NAME
FROM COUNTRIES C
JOIN REGIONS R
ON C.REGION_ID = R.REGION_ID;
--HOW MANY COUNTRY_NAME  IN EACH REGION
GROUP BY
SELECT R.REGION_NAME , COUNT(C.COUNTRY_NAME)
FROM COUNTIRES C
JOIN REGIONS R
ON C.REGION_ID = R.REGION_ID
GROUP BY R.REGION_ID;
LETS JOIN 3 TABLES
FIND CITY - LOCATIONS, COUNTRY_NAME - COUNTRIES , REGION_NAME - REGIONS;
SELECT * FROM LOCATIONS;
SELECT * FROM COUNTRIES;
SELECT * FROM REGIONS;
SELECT CITY , COUNTRY_NAME , REGION_NAME
FROM LOCATIONS L
JOIN COUNTRIES C
ON L.LOCATION_ID = C.LOCATION_ID
JOIN REGIONS R
ON L.COUNTRY_ID = R.COUNTRY_ID;
------------------------------------------------------------
-Show Employees and Their Managers
SELECT e.employee_id, e.first_name AS Employee, m.first_name AS Manager
FROM employees e
INNER JOIN employees m ON e.manager_id = m.employee_id;
-List All Departments Including Those Without Employees
SELECT d.department_name, e.first_name, e.last_name
FROM departments d
LEFT JOIN employees e ON d.department_id = e.department_id
ORDER BY d.department_name;
---------------------------------------------------------
















