select * from employees;

select * from user_tables;
SELECT * FROM USER_TABLES;
--KEYWORDS AND TABLES NAMES IS NOT CASE SENSETIVE
--VALUES ARE CASE SENSETIVE
--SQL        NOSQL
--ORACLE   -- MONGODB
--MYSQL     -- REDIS

--CRUD
--CREATE --
--READ -- SELECT
--UPDATE --
--DESTROY  --

 --SYNTAX
-- SELECT * -- READ EVERYTHING
-- SELECT <COLUMN-NAME OR * > FROM <TABLE-NAME>
SELECT FIRST_NAME FROM EMPLOYEES;
SELECT FIRST_NAME , LAST_NAME FROM EMPLOYEES;
SELECT   LAST_NAME , FIRST_NAME FROM EMPLOYEES;

--GET THE EMP_ID , FIRST_NAME , LAST_NAME , HIRE_DATE FROM EMPLOYEES TABLE
SELECT EMPLOYEE_ID ,FIRST_NAME , LAST_NAME , HIRE_DATE  FROM EMPLOYEES;
--
SELECT * FROM JOB_HISTORY;
SELECT * FROM COUNTRIES;

SELECT * FROM EMPLOYEES WHERE FIRST_NAME = 'David';

--WHERE CLAUSE IS THE FOR FILTERING specific data from table;
--SYNTAX
--SELECT <COLUMN_NAME> FROM <TABLE_NAME> WHERE = <CONDITIONS>;
SELECT * FROM EMPLOYEES WHERE LAST_NAME = 'Olson';
--find somebody from employees table who work as IT_prog
select * from employees where job_id = 'IT_PROG';

SELECT * FROM COUNTRIES;

--COUNTRY NAME WHERE REGION_ID IS 3

SELECT COUNTRY_NAME FROM COUNTRIES WHERE REGION_ID = 3;

--FIND EMPL WHO HAVE SALARY > 10000 DOLLARS
--DBA - DATABASE ADMIN

SELECT * FROM EMPLOYEES WHERE SALARY >= 10000 AND JOB_ID  = 'PU_MAN';
--BOTH CONDITIONS NEED TO BE TRUE
--AND -- OR

SELECT * FROM EMPLOYEES WHERE SALARY >= 10000 OR JOB_ID  = 'PU_MAN';
--OR -- ONE OF THE CONDITION NEED TO BE TRUE

--4 MAIN FUNCTIONAL CATEGORIES

        -- DML - DATA MANIPULATION LANGUAGE
        -- INSERT , UPDATE , DELETE DATA FROM TABLE

        --DQL -  DATA QUERY LANGUAGE
        --SELECT -- RETRIVE DATA FROM DATABASE

        --DDL - DATA DEFINITION LANGUAGE
        -- DEFINE A SCHEMA , TABLES AND RULES USED WHILE CREATING THE DB;

        -- DCL - DATA CONTROL LANGUAGE
        --USED FOR CONTROLING THE PERMITIONS , GIVING ACCESSES TO OTHER USERS

        SELECT * FROM EMPLOYEES WHERE HIRE_DATE BETWEEN '01-JAN-93' AND '31-DEC-96';

        -- BETWEEN IS GETTING DATA FROM 2 CONDITIONS USING AND KEYWORD

--FIND EMPL WHO HAVE SALARY BETWEEN 3100 AND 14000
SELECT * FROM EMPLOYEES WHERE SALARY BETWEEN 3100 AND 14000;
--FIND EMPL WHO HAVE EMPL_ID BETWEEN 100 AND 125
SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID >= 100 AND employee_id <= 120;
SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID BETWEEN 100 AND 120;

--IN
--FIND EMPL WHO HAVE SALARY ONLY 24000 OR 4800
SELECT * FROM EMPLOYEES WHERE SALARY = 24000 OR SALARY = 4800;
--FIND EMPLYOEES WHO HAVE EMPLOYEE ID 100 , 109, 129;
SELECT * FROM EMPLOYEES WHERE employee_id = 100 OR employee_id = 109 OR employee_id = 129;

SELECT FIRST_NAME , LAST_NAME FROM EMPLOYEES WHERE employee_id IN (100,109,129);

--FIND EMPL WHO HAVE SALARY ONLY 24000 OR 4800
SELECT * FROM EMPLOYEES WHERE SALARY IN (24000, 4800);

-- LIKE WHILECARD
-- START WITH

SELECT FIRST_NAME , LAST_NAME FROM EMPLOYEES WHERE FIRST_NAME LIKE 'A%' OR FIRST_NAME LIKE 'B%';

--CONTAINS a somewhere it the first name
SELECT FIRST_NAME , LAST_NAME FROM EMPLOYEES WHERE FIRST_NAME LIKE '%a%';

--END WITH a
SELECT FIRST_NAME , LAST_NAME FROM EMPLOYEES WHERE FIRST_NAME LIKE '%a';

--second letter is 'l'
SELECT FIRST_NAME , LAST_NAME FROM EMPLOYEES WHERE FIRST_NAME LIKE '_l%';

--find employees * who start a job in JUN
select * from employees where hire_date like '%JUN%';
select * from employees where hire_date like '__-JUN-__';
--find empl who have firstName start with A and last_name contains b
select * from employees where first_name like 'A%' and last_name like '%b%';

select * from employees where first_name like '_A%';

--UPPER
SELECT UPPER(FIRST_NAME) FROM EMPLOYEES ;

--LOWER
SELECT LOWER(EMAIL) FROM EMPLOYEES;

--INITCAP -INITAL CAPITAL FIRST LETTER TO UPPERCASE
SELECT FIRST_NAME , LAST_NAME , INITCAP(EMAIL) FROM EMPLOYEES;

--ALIES -- NICK NAME - GIVE NICK NAME TO OUTPUT COLUMN

SELECT FIRST_NAME , LAST_NAME , INITCAP(EMAIL) AS EMIAL FROM EMPLOYEES;

--SUBSTR - SAME AS IN JAVA
SELECT SUBSTR(FIRST_NAME ,0, 5) AS FIRST_NAME FROM EMPLOYEES;


--CONCATINATION

SELECT FIRST_NAME , LAST_NAME , lower(EMAIL) ||'@gmail.com' as fullname from employees;


SELECT FIRST_NAME || '_' ||last_name as fullname from employees;

--find empl first_name , last_name , salary who have salary more than 15k

select first_name , last_name , salary from employees where salary >= 15000;


--class 2 3/20/24

-- firstname lastname empl who who at departmement_id = 50;

--FIrst name , last name , salary empl who wokr in department 50 and salary  > 5000;

select first_name , last_name from employees where department_id = 50;

select * from departments;

select first_name , last_name , salary from employees where department_id = 50 and salary >5000;

--find empl who work at department 50 and empl at department 60

select first_name , last_name , department_id from employees where department_id = 50 or department_id = 60;

--find empl who have first_name starts with A
select * from employees where first_name like 'A%';
--get empl first and last name and email as lower case and name the result-set column as email
select first_name , last_name , lower(email) as email from employees;
--get the empl first name and concat the upper case lastName ;
select concat(first_name , upper(last_name)) from employees;
select first_name || ' ' ||upper(last_name) from employees;

--get the email as initcap concat first 3 letters from LastName and concat @gmail.com
select initcap(email) || substr(last_name , 1, 3) || '@gmail.com' from employees;
--get the all empl infor and where emplId is not 100 105 and 102
select * from employees where employee_id not in (100, 105, 102 ) ;

--find empl where 2nd letter of last name is  b
select * from employees where last_name like '_a%';
--find empl infor who have lst name length only 5
select * from employees where Length(last_name) = 5;

--Sorting -- Order by

select * from employees order by first_name asc;
select * from employees order by first_name desc;

select * from employees order by first_name asc , last_name asc;
--sorting is going to have by first column (duplicates) , second column

--first name , last ,salary then order it by salary
select * from employees order by salary;

--find people who make more than 5000 adn order by asc salary
select * from employees where salary > 5000 order by salary;
--find first_name , last_name , salary , depratment_id  where salary is more than 10000 and deparmtnes is
--not 50 order by
--first_name ;

select first_name , last_name ,
salary , department_id
from employees
where salary > 10000
and  not department_id = 50;


--find people with commission_pct;
--is not
select * from employees where commission_pct is not null;
select * from departments;


--uniqe values --distinct

select distinct first_name from employees order by first_name;

select distinct department_id , first_name from employees  order by first_name;
select distinct job_id , department_id from employees;


select country_id from locations;
select * from locations;

select * from countries;


---Round , Trunc , MOD
select salary + 0.9 from employees;
select round(salary + 0.9) from employees;
select round(salary + 0.5) from employees;

select trunc(salary + 0.9)  from employees;

select first_name , last_name  ,  salary , mod(salary, 5000) from employees order by salary;
select first_name , last_name  ,  salary  from employees order by salary;

--Multiple row functions aka Aggregate functions
--count, min  , max , sum ,AVG

select count(*) from employees;
select count(country_name ) from countries;

select avg(salary) from employees; -- only works with numeric values;

select sum(salary ) from employees; --only works with numeric values

select max(salary) from employees;

select min(salary) from employees;

select min(first_name) from employees;

select max(salary), first_name from employees;

--group by clause

--get the avg salary and round it ;
--get the avg salary and trunc it ;

select round(avg(salary)) from employees;
select trunc(avg(salary)) from employees;

select avg(round(salary)) from employees;

select * from employees;

select department_id , round(avg(salary)) from employees having salary > 5000 group by department_id;

select first_name from employees group by first_name order by first_name;

select department_id , round(avg(salary)) from employees group by department_id  having round(avg(salary)) > 5000;

--count the numb of employees in each job_id category
select job_id , count(*) as numb_of_employees from employees group by job_id;

--how much salary company spend a year;
select sum(salary)*12 from employees;
select sum(salary) from employees;

-- find the total salary exp for each depratment
select department_id , sum(salary) from employees group by department_id;

-- find the avg salary exp for each depratment where salary greater than 5000;
select department_id , trunc(avg(salary)) from employees group by department_id having trunc(avg(salary)) > 5000;

select job_id , count(*) as num_of_empl
from employees
group by job_id
having count(*) > 10;

-- find departments with total salaries exceeding 100 000
select department_id , sum (salary)
from employees
group by department_id
having sum(salary ) > 100000;


-- subqery -- nested query
select * from employees where first_name  = (select first_name from employees where first_name = 'Alexander');

select * from employees order by salary desc;

select first_name from employees where salary = (select max(salary) from employees);

select first_name from employees where salary = 24000;

select first_name
from employees
where salary = (select max(salary)
from employees where salary != (select max(salary) from employees));



--rownum
select first_name , salary from employees where rownum <= 2 order by salary ;
--LIMIT

select * from departments;

--empl first last name department_id where department name Sales;

select first_name , last_name , department_id
from employees
where department_id = (select
department_id
from departments
where department_name = 'Sales');

--ORder of the keywords
--Select
--from
--where
--group by
--having
--order by
--------------------------------------------------------

SQL database
3/19/24

Recap - Select where aggregate functions , group by , order by having
subquery

joins -
set operators -


------------------------------------------------------------------------------------

--select all employees from only 2 departments 100 and 110
2 options

select * from employees where department_id in(100, 110);

-- find employees with salaries > 10 000 excluding department 50
get the first_name , last_name , salaries > 10000 and department_id is not 50

select first_name , last_name , salary from employees where salary > 10000 and department_id !=50;

select first_name , last_name , salary, department_id from employees where salary > 10000 and department_id <> 50;

--Find employees where first_name start with 'A'

select * from employees where first_name like 'A%';


--Find employees HIRED IN "JUNE"
select * from employees where hire_date like '__JUN__';

-- get employees with concat first and last name with a " " space and all data in upper case resultset column shoud be named Full name
SELECT UPPER(FIRST_NAME || ' ' || LAST_NAME ) AS FULL_NAME FROM EMPLOYEES;


AGGREGATE FUNCTIONS - MULTIPLE  ROW FUNCTION
-- COUNT THE NUMBER OF EMPLOYEES IN EACH DEPARTMENT
THE OUTPUT SHOULD BE
DEPARTMENT_ID   COUNT(*)
50 				15

SELECT DEPARTMENT_ID , COUNT(FIRST_NAME) AS NUM_EMPLOYEES FROM EMPLOYEES GROUP BY DEPARTMENT_ID;

--CALCULATE THE AVARAGE SALARY FOR EACH JOB_ID
SELECT JOB_ID , AVG(SALARY) FROM EMPLOYEES GROUP BY JOB_ID;


--GET ALL UNIQUE JOB_ID - TO KNOW HOW MANY JOBS WE HAVE
SELECT DISTINCT JOB_ID FROM EMPLOYEES;
DISTINCT IS A KEYWORD RETURNS ONLY UNIQUE RESULT SET ROWS (VALUES)
SELECT DISTINCT JOB_ID FROM EMPLOYEES;
SELECT  DISTINCT DEPARTMENT_ID FROM EMPLOYEES;

SUBQUERY NESTED
--FIND EMPLOYEES WITH SMALLEST SALARY
SELECT * FROM EMPLOYEES WHERE SALARY = (SELECT MIN(SALARY) FROM EMPLOYEES);

-- get all emploees with departments name = Sales
select * from employees where department_id =  (select department_id from departments where department_name = 'Sales');

--find the max salary in employees table
select max(salary) from employees;

--find sum of salary in each department in employees table
sum of salary in each department_id
GROUP BY CAN BE USED WITHOUT AGGREGATE FUNCTIONS (SINGLE ROW FUNCTION)
AGGREGATE FUNCTION MOSTLY USED WITH GROUP BY.
select department_id , sum(salary) from employees group by department_id;

--COUNT GROUP OF PEOPLE WITH DIFFERENT COMMISSION PERCENTAGE
7 - 0.3
5 - 0.9
SELECT COUNT(COMMISSION_PCT) FROM EMPLOYEES;

SELECT * FROM EMPLOYEES WHRE ROWNUM <=2;

------------------------------------------------

JOIN - clause is used to combine rows from two or more tables, based on related
column between them.

3 TYPES OF JOINS :
		--INNER JOIN
		--OUTTER JOIN:
			FULL JOINT (FULL OUTTER JOIN)
			RIGHT JOIN (RIGHT OUTTER JOIN)
			LEFT JOIN
		SELF JOIN
NATURAL JOIN

INNER JOIN - RETURNS ONLY MATCHING ROWS DATA FROM TWO TABLES.
if you use just join keyword by default it is inner join
JOINS CAN BE DONE ONLY WITH PRIMARY AND FOREGN KEYS

SYNTAX
select e.first_name , e.last_name , d.department_name
from employees e
inner join departments d --table you connection
on e.department_id = d.department_id; -- foregn key to primary key


FULL OUTTER JOIN -  RETURN ALL RESULTS FROM LEFT AND ALL RESULTS FROM RIGHT TABLES.
select e.first_name , e.last_name , d.department_name , e.department_id
from departments d
full join  employees e
on e.department_id = d.department_id;


LEFT OUTTER JOIN - WILL RETURN ALL RESULTS FROM LEFT TABLE AND ONLY MATCHING DATA FROM THE RIGHT TABLE
select e.first_name , e.last_name , d.department_name , e.department_id
from departments d
LEFT join  employees e
on e.department_id = d.department_id;
LEFT TABLE IS THE TABLE AFTER FROM - IF WE SELECT IT FROM THE TABLE FIRST IT WILL BE LEFT TABLE
AND RIGHT TABLE WILL BE THE JOINING TABLE - WHICH IS EMPLOYEES TABLE

CHOOSING TABLE WILL BE LEFT TABLE.
JOINS TABLE WILL BE RIGHT TABLE.

RIGHT OUTTER JOIN - WILL RETURN ALL RESULTS FROM RGIHT TABLE AND ONLY MATCHING DATA FROM THE LEFT TABLE
select e.first_name , e.last_name , d.department_name , e.department_id
from departments d
RIGHT join  employees e
on d.department_id = e.department_id;

SELF JOIN - REGULAR JOINS BUT TABLES JOINED BY ITSELF
SELECT e1.first_name as empl1 , e2.first_name as empl2 , e1.job_id
from employees e1
join employees e2
on e1.employee_id != e2.employee_id and e1.job_id = e2.job_id;

NATURAL JOIN - kind of inner join

SELECT e.first_name , d.department_name
	from employees e
	Natural join departments d order by e.first_name;

----------------------------------------------------------------

get everything from jobs
get everything from job_history;
join job_history and Jobs tables
inner
select * from jobs j
inner join job_history
on j.job_id = jh.job_id;

full
select * from jobs j
full join job_history
on j.job_id = jh.job_id;

left
select * from jobs j
left join job_history
on j.job_id = jh.job_id;

right
select * from jobs j
right join job_history
on j.job_id = jh.job_id;


-- find people who worked in our company
join job_history and employees
and get first_name , last_name , department_id , start_date , end_date

select e.first_name , e.last_name , e.department_id , jh.start_date , jh.end_date
from employees e
join job_history jh
on e.employee_id = jh.employee_id;

--fileter out only employees who worked starting JAN 89 and end 94
select e.first_name , e.last_name , e.department_id , jh.start_date , jh.end_date
from employees e
join job_history jh
on e.employee_id = jh.employee_id
where jh.start_date > '01-JAN-89' AND jh.end_date < '31-DEC-94';

--find the  country name , region name;
select country_name , region_name
from countries c
join regions r
on c.region_id = r.region_id;

-- find how many country_name in each region
join , count(c.country_name),
group by
Select r.region_name , count(c.country_name)
from countries c
join regions r
on c.region_id = r.region_id
group by r.region_name;

--join 3 tables locations, countries , regions;
Select r.region_name , country_name , city
from countries c
join regions r
on c.region_id = r.region_id
join locations l
on l.country_id = c.country_id;

-- list all the departments including those without employees
left table is department
department_id , first and last_name
left join
on department_id
employyes
-- 3 min

select d.department_id , e.first_name , e.last_name
from departments d
left join employees e
on d.department_id = e.department_id;

--git new line



-----CLASS 4
class 4 sql


join

--- find departmets names with more than 5 employees
d.department_name , count(e.employee_id) as num_employees
departments
 inner join employyes
 group by
 having > 5;

select d.department_name , count(e.employee_id) as num_employees
from departments d
join employees e
on e.department_id = d.department_id
group by d.department_name
having count(e.employee_id) > 5;




----------

-- subquery
find employees earning more than avarage salary
select first_name , last_name ,salary
from employees
where salary > (select avg(salary) from employees);

-- find avg salary by departmetn_name
department_name , avg(salary)
join departments on department_id

select d.department_name , avg(salary)
from employyes e
join departments d
on e.department_id = d.department_id
group by d.department_name
order by avg(salary) desc;

-- find departments with the highest paid employees
department_id , max(salary) as max salary
group by department_id
having max(salary) > (subquery getting avg salary)


select department_id , max(salary) as max_salary
from employees
group by department_id
Having max(salary) > (select avg(salary) from employees);


----------------------------------------------------------------------

self join
find employees managers

select e1.first_name ,e1.last_name , e2.first_name as Mfirst_name, e2.last_name  as Mlast_name
from employees e1
join employees e2
on e1.manager_id = e2.employee_id
order by e2.first_name;
----------------------------------------------------------------------
SOUND MORE PROFFESSIONAL

	YES - I KNOW SQL REALLY WELL
	I KNOW DQL , DML , DDL COMMANDS
	AND I AM ALSO FAMILIER WITH
	DCL COMMANDS.
	I CAN EASEALY JOINS TABLE
	I KNOW ALL JOINS         KEY
	I KNOW AGGREGATE FUNCTIONS
	MAX(), GROUP BY
	SET COMMANDS
	UNION , UNION ALL , INTERSECT
	JDBC LIBRARY I CAN CONNECT MY DATABASE TO MY JAVA TO DO AUTOMATION.

 (PRIMARY KEY) - UNIQE , CAN NOT BE NULL. ()
 FOREGN - CAN BE NULL AND DUPLICATED

----------------------------------------------------------------------
SET OPERATORS

These are used to get meaningful results from data stored in the table, under different special conditions.

ETL - EXTRACT TRANSFER LOAD



--MINUS get result from the second query and substract from the first query result;
==
SELECT * FROM EMPLOYEES
WHERE FIRST_NAME IN ('John' ,  'Peter')
minus
SELECT * FROM EMPLOYEES
WHERE FIRST_NAME  = 'John' ;
OUTPUT IS PETER

==
SYNTAX FOR SET OPERATORS - THE COLUMN DATATYPE AND NUMBER OF COLUMN and order of column shoud be same .
select first_name , salary from employees
union
select salary, first_name from employees;
this will not work because of order columns

==
SELECT DEPARTMENT_ID FROM EMPLOYEES --ONE PERTSON HAS DEPARTMENT_ID NULL
MINUS
SELECT DEPARTMENT_ID FROM DEPARTMENTS;
==
FROM THE  FIRST QUERY WE HAVE A LOT DEPARTMENT_ID AND ONLY ONE NULL VALUE
SECOND QUERY HAS A LOT OF DEPARTMENT_ID WHICH IS SAME AS FROM FIRST QUERY
BUT SECOND QUERY DOES NOT HAVE NULL
THE OUTPUT WILL BE ONE DEPARTMENT_ID NULL


FIRST_NAME - MINUS-|SECONDQUERY
ALEX				|ALEX
JOHN 				|JOHN
PETER				|GIANT
BOB					|TOM

OUTPUT WILL BE ALWAYS FROM FIRST QUERY
PETER
BOB

--UNION -> UNION is used to combine the results of two or more SELECT statements. However, it will eliminate duplicate rows from its result.

FIRST_NAME - UNION -|SECONDQUERY
ALEX				|ALEX
JOHN 				|JOHN
PETER				|GIANT
BOB					|TOM

OUTPUT
ALEX
JOHN
PETER
GIANT
BOB
TOM

SELECT *  FROM EMPLOYEES
WHERE FIRST_NAME  = 'John' and last_name =  'Chen'
union
SELECT *  FROM EMPLOYEES
WHERE FIRST_NAME in('Steven','John') and last_name in( 'King','Chen');

--UNION ALL SAME AS UNION BUT IT IS NOT GOING TO REMOVE THE DUPLICATES

SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE 'A%'
UNION all
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE 'Amit';

SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE 'A%' order by first_name;
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE 'Amit';


-- INTERSECT -

INTERSECT -> Intersect operation is used to combine two SELECT statements, but it only returns the records which are common from both SELECT statements. In the case of Intersect, the number of columns and datatype must be the same.

SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE 'A%'
INTERSECT
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE 'Amit';

OUTPUT
AMIT INFO


SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE 'A%'
INTERSECT
SELECT * FROM EMPLOYEES WHERE FIRST_NAME LIKE 'Amit';

----------------------------------------------------------------------

DDL - DATA DEFFINITION LANGUAGE
CREATE - CREATING TABLES
	SYNTAX
		CREATE TABLE <TABLE_NAME> (COLUMN_NAME DATATYPE,COLUMN_NAME2 DATATYPE );


DATATYPES MOST COMMON :
		VARCHAR2 - STRING
		NUMBER - NUMBER
		DATE - DATE AND TIME
select * from employees;

CREATE TABLE STUDENT(student_id number primary key,
						first_name varchar2(20),
						last_name varchar2(20),
						dateOfBirth date);
----------------------------------------------------------------------
DML - DATA MANIPULATION LANGUAGE
		INSERT INTO STUDENT(student_id,
							first_name,
							last_name,
							dateOfBirth)
		VALUES (1,'John','Johns', to_date('2000-01-01','YYYY-MM-DD'));
INSERT INTO STUDENT(student_id,
							first_name,
							last_name,
							dateOfBirth)
		VALUES (2,'Jane','Doe', to_date('1999-05-18','YYYY-MM-DD'));

INSERT INTO STUDENT(student_id,
							first_name,
							last_name,
							dateOfBirth)
		VALUES (3,'Bo','Nicel', to_date('1990-05-23','YYYY-MM-DD'));

INSERT INTO STUDENT(student_id,
							first_name,
							last_name,
							dateOfBirth)
		VALUES (4,'Jim','Beam', to_date('1987-12-01','YYYY-MM-DD'));

commit; - this is how to save your data in to database.


----------------------------------------------------------------------
update - DML

UPDATE <TABLE_NAME>
SET <COLUMN_NAME> = <NEW_COLUMN_VALUE>
WHERE = <CONDITIONS>;

UPDATE STUDENT
SET LAST_NAME = 'Obama'
where student_id = 1;

-- update studnt last_name , date of birth = to_date('change value','YYYY-MM-DD') where st_id 2

update student
set first_name = 'Alexader' , last_name = 'Macedonia',
		dateOfBirth to_date('1187-12-25','YYYY-MM-DD')
		where student_id = 2;

update tj olson to 24000 salary

----------------------------------------------------------------------
DELETE DDL
DELETE <TABLE_NAME> WHERE CONDITION;
it is going to delete a row
but you have option to choose what you want to delete
with WHERE clause;
there is an option to roll back you can revert delete ;

rollback; - TO REVERT DELETE
IF DATA HAS NOT BEEN COMMITED;


TRUNCATE - WILL REMOVE ALL DATA FROM TABLE LIKE DELETE AND LEAVE THE SCHEEMA .
NO OPTION TO ROLLBACK

	TRUNCATE TABLE <TABLE_NAME>;
TRUNCATE TABLE STUDENT;

DROP TABLE <TABLE_NAME>; - IT WILL REMOVE THE TABLE ITSELF WITH SCHEEMA AND DATA;
IT WILL DELETE EVERYTHING;
NO OPTIONS TO ROLLBACK

DELETE    			TRUNCATE  					 DROP
YOU CAN DELETE 		IT WILL REMOVE 				REMOVE ALL THE TABLE
ONLY ONE ROW 		ALL DATA 					NO OPTION WHERE
WITH WHERE 			NO OPTIONS WHERE			NO SCHEEMA

DROP TABLE STUDENT-4;
----------------------------------------------------------------------



CREATE TABLE STUDENT_B(student_id number,
						first_name varchar2(20),
						last_name varchar2(20),
						dateOfBirth date);

ALTER - DDL


ADD COLUMN TO OUR TABLE
ALTER TABLE <TABLE_NAME> ADD <COLUMN_NAME> DATATYPE;

ALTER TABLE STUDENT_B ADD EMAIL VARCHAR(20);

update student_b
set email ='bob@gmail.com' where student_id = 1; -- to update data

---------------------------------------------------------

modify column -

alter table student_b
modify first_name varchar(200);

---------------------------------------------------------
drop the column
alter table student_b
drop column email;

---------------

rename column
ALTER table student_b
rename column dateOfBirth TO dob;

--MAKE STUDENT_ID  PRIMARY KEY
ALTER TABLE STUDENT_B
ADD CONSTRAINT STUDENT_PK PRIMARY KEY (STUDENT_ID);


--ALTER TABLE STUDENT_B
DROP CONSTRAINT STUDENT_PK ;

--RENAME TABLE NAME

ALTER TABLE STUDENT_B
RENAME TO STUDENT_V;


--------------------------------------------------------

STORED PROCEDURES - YOU CAN SAVE QUERIES TO VARIABLE
VIEW  - IT IS CREATING VERTUAL TABLE AND REFFERING BY ANOTHER FUNCTIONS;















































































